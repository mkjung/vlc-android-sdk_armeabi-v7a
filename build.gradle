buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.1'
        classpath 'org.ajoberstar:gradle-git:1.3.2'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
    }
}

apply plugin: 'maven'
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.0'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode project.VERSION_CODE.toInteger()
        versionName project.VERSION_NAME
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile "com.android.support:support-v4:23.1.1"
    compile 'com.android.support:support-annotations:23.1.1'
}

allprojects {
    version = VERSION_NAME
    group = GROUP

    repositories {
        jcenter()
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging project.POM_PACKAGING
                name project.POM_NAME
                description project.POM_DESCRIPTION
                url project.POM_URL

                licenses {
                    license {
                        name project.POM_LICENCE_NAME
                        url project.POM_LICENCE_URL
                        distribution project.POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id project.POM_DEVELOPER_ID
                        name project.POM_DEVELOPER_NAME
                    }
                }
                scm {
                    connection project.POM_SCM_CONNECTION
                    developerConnection project.POM_SCM_DEV_CONNECTION
                    url project.POM_SCM_URL
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

import org.ajoberstar.grgit.Grgit

project.ext.vlcAndroidSource = file('vlc-android')
project.ext.vlcSource = file('vlc-android/vlc')

task cloneVlcAndroid << {
    Grgit.clone(uri: 'https://code.videolan.org/videolan/vlc-android.git',
            dir: project.ext.vlcAndroidSource)
}

// Only clone once.
cloneVlcAndroid.onlyIf { !project.ext.vlcAndroidSource.exists() }

task updateVlcCheckout(dependsOn: 'cloneVlcAndroid') << {
    try {
        def repo = Grgit.open(project.ext.vlcSource)
        repo.pull(rebase: true)
    }
    catch (RuntimeException e) {
        logger.warn("Wasn't able to update checkout at " + project.ext.vlcSource + ": "
                + e.getClass() + " - " + e.getLocalizedMessage());
    }
}

// Don't update vlc checkout if it doesn't exist yet.
// This is the case when we're building for the first time.
updateVlcCheckout.onlyIf { project.ext.vlcSource.exists() }

task purgeOldJniLibs(type: Delete, dependsOn: 'updateVlcCheckout') {
    delete "src/main/jniLibs"
}

task purgeOldJava(type: Delete, dependsOn: 'purgeOldJniLibs') {
    delete "src/main/java"
}

task compileVlcArmv7a(type: Exec, dependsOn: 'purgeOldJava') {
    workingDir project.ext.vlcAndroidSource
    commandLine './compile.sh'
    args "-a", "armeabi-v7a"
    args "release" // Remove this to build a debug libvlc
    args "-l" // only build libvlc
}

task buildVlcArmv7a(type: Copy, dependsOn: 'compileVlcArmv7a') {
    from(vlcAndroidSource.getAbsolutePath() + '/libvlc/jni/libs/armeabi-v7a/')
    into('src/main/jniLibs/armeabi-v7a/')
    finalizedBy 'copyLibVlcFiles'
}

task copyLibVlcFiles(type: Copy) {
    from(vlcAndroidSource.getAbsolutePath() + '/libvlc/src/')
    into('src/main/java')
}

task buildLibVlc() {
}

buildLibVlc.dependsOn {
    tasks.findAll { task -> task.name.startsWith('buildVlc') }
}

//upload aar to maven central with sonatype
//apply from: 'https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/97de89785bdbf0bc0b380fb60851cabc552811dc/gradle-mvn-push.gradle'
